/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/
 */
/* VARS/COLORS TO BE CHECKED */
$themes: (
  'light': (
  'color-1': #fff,
  'color-2': #000,
),
  'dark': (
    'color-1': #fff,
    'color-2': #000,
  )
) !default;

/// Themify mixin
/// @access private
/// @author Hugo Giraudel
/// @param {String} $property - Property to themify
/// @param {String} $key - Key color to use from theme
/// @param {Map} $themes [$themes] - Map of themes to use
@mixin themify($property, $key, $themes: $themes) {
  // Iterate over the themes
  @each $theme, $colors in $themes {
    // Create two selectors (e.g. `.media.theme-unicorn and .theme-unicorn .media`)
    // They are not joined by comma-separator because
    // sometimes, when the `&` has a pseudocomponent,
    // the first rule might fail.
    &.theme-#{$theme} {
      #{$property}: map-get($colors, $key);
    }
    .theme-#{$theme} & {
      #{$property}: map-get($colors, $key);
    }
  }
}

/// Shorthand to themify color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin color($arguments...) {
  @include themify('color', $arguments...);
}

/// Shorthand to themify background-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin background-color($arguments...) {
  @include themify('background-color', $arguments...);
}

/// Shorthand to themify border-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-color($arguments...) {
  @include themify('border-color', $arguments...);
}

@mixin box-shadow($arguments...) {
  @include themify('box-shadow', $arguments...);
}
